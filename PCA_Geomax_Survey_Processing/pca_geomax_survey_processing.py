# -*- coding: utf-8 -*-
"""
/***************************************************************************
 PCA_Geomax_processing
                                 A QGIS plugin
 This plugin process the survey data generated by Geomax
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-07-26
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Valerio Pinna
        email                : pinnavalerio@yahoo.co.uk
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os
import glob
import os.path
from qgis.utils import *
from datetime import date, datetime
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction,QMessageBox, QToolBar, QProgressBar
from PyQt5.QtWidgets import QApplication, QWidget, QInputDialog, QLineEdit, QFileDialog
from PyQt5.QtGui import QIcon
from PyQt5.QtCore import Qt
from qgis.core import *
from time import sleep
from shutil import copy
import webbrowser

# from qgis.core import QgsLayerTreeGroup, QgsLayerTreeLayer
# from qgis.utils import iface

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog

from .pca_geomax_update_DRS_dialog import PcaGeomaxUpdateDRSTableDialog
from .pca_geomax_backup_geopackage_dialog import PcaGeomaxBackupGeopackageDialog

from .pca_geomax_import_processed_shp_dialog import PCA_Geomax_Import_Processed_SHP_Dialog

from .pca_geomax_copy_shp_to_gis_layers_dialog import PCA_Geomax_copy_shp_to_GIS_layers_processingDialog


class PCA_Geomax_processing:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'PCA_Geomax_processing_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&PCA Geomax Survey Processing')
        

        #Declare dialogues
        self.dlgtool1 = PCA_Geomax_Import_Processed_SHP_Dialog()
        self.dlgtool2 = PCA_Geomax_copy_shp_to_GIS_layers_processingDialog()
        self.dlgtool3 = PcaGeomaxUpdateDRSTableDialog()
        self.dlgtool4 = PcaGeomaxBackupGeopackageDialog()
        
        
        
        self.toolbar = iface.mainWindow().findChild( QToolBar, u'&PCA Geomax Survey Processing' )
        if not self.toolbar:
            self.toolbar = iface.addToolBar( u'&PCA Geomax Survey Processing' )
            self.toolbar.setObjectName( u'&PCA Geomax Survey Processing' )
            self.toolbar.setToolTip("")

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('PCA_Geomax_processing', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

            
        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
             self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""
        
        self.layergeneratoricon= self.add_action( 
            icon_path = ':/plugins/pca_geomax_survey_processing/icons/pca_logo_icon.png',
            text=self.tr(u''),
            #callback=self.dontdonothing,
            callback=self.dontdonothing,
            parent=self.iface.mainWindow())
        # will be set False in run()
        self.first_start = True
        
        
        self.layergeneratoricon= self.add_action( 
            icon_path = ':/plugins/pca_geomax_survey_processing/icons/geomax_processing_import_icon.png',
            text=self.tr(u'Process and import raw survey shapefiles'),
            callback=self.process_and_load_layers,
            parent=self.iface.mainWindow())
        # will be set False in run()
        self.first_start = True
        
        self.layergeneratoricon= self.add_action( 
            icon_path = ':/plugins/pca_geomax_survey_processing/icons/geomax_processing_copy_paste_icon.png',
            text=self.tr(u'Copy the survey data to the GIS layers'),
            callback=self.copy_and_paste_to_GIS,
            parent=self.iface.mainWindow())
        # will be set False in run()
        self.first_start = True
        
        self.layergeneratoricon= self.add_action( 
            icon_path = ':/plugins/pca_geomax_survey_processing/icons/geomax_update_DRS_icon.png',
            text=self.tr(u'Update the DRS_Table from a external CSV file'),
            callback=self.update_DRS_table,
            parent=self.iface.mainWindow())
        # will be set False in run()
        self.first_start = True
        
        self.layergeneratoricon= self.add_action( 
            icon_path = ':/plugins/pca_geomax_survey_processing/icons/geomax_backup_gpkg_icon.png',
            text=self.tr(u'Create a backup copy of the active GeoPackage'),
            callback=self.gpkg_backup,
            parent=self.iface.mainWindow())
        # will be set False in run()
        self.first_start = True
        
        self.layergeneratoricon= self.add_action( 
            icon_path = ':/plugins/pca_geomax_survey_processing/icons/geomax_help_icon.png',
            text=self.tr(u'Open the help'),
            callback=self.help_show,
            parent=self.iface.mainWindow())
        # will be set False in run()
        self.first_start = True
  
        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&PCA Geomax Survey Processing'),
                action)
            self.iface.removeToolBarIcon(action)

    def process_and_load_layers(self):
        if self.first_start == True:
            self.first_start = False
            
            
            
        # show the dialog
        self.dlgtool1.show()
        # Run the dialog event loop
        result = self.dlgtool1.exec_()
        # See if OK was pressed
        if result:
                 
        
        
            #add the action here
            
            ##starting time
            time0= datetime.now()
            
            root = QgsProject.instance().layerTreeRoot()


            ##select a folder in explorer
            folder = str(QFileDialog.getExistingDirectory(None, "Select Directory"))
            if len(folder) == 0:
                return self.dontdonothing()
            else:
                pass
            empty_folder_check = []
            for file in glob.glob( folder + "/" + "*.shp" ):
                empty_folder_check.append(file)
            
            if len(empty_folder_check) == 0:
                QMessageBox.about(
                        None,
                        'PCA Geomax Survey Processing',
                        '''The selected folder doesn't contain any shapefile. Please select a valid folder and retry.''')
                return self.dontdonothing() 
            if len(empty_folder_check) != 0:
                
                                
                ###create new group with the date when the survey files were saved
                #retrieve first file in the folder
                file = os.listdir(folder)[0]
                file_address = (folder+'\\'+file)

                m_time = os.path.getmtime(file_address)
                # convert timestamp into DateTime object
                dt_m = datetime.fromtimestamp(m_time)
                dt_mWithoutTime = dt_m.strftime('%Y-%m-%d')
                survey_export_date = (str(dt_mWithoutTime).replace('-',''))

                group_name = 'survey_data_temp_'+survey_export_date

                if not root.findGroup(group_name):
                            root.insertGroup(0, group_name)  
                else:
                    pass


                #create a new folder
                ##set path to main survey_daily_processing_folder
                #create a new folder
                ##set path to main survey_daily_processing_folder
                last_folder = os.path.basename(folder)
                interm_path = folder.replace(last_folder,'')[:-1]
                second_last_folder = os.path.basename(interm_path)
                second_interm_path = interm_path.replace(second_last_folder,'')[:-1]
                third_last_folder = os.path.basename(second_interm_path)
                new_processed_path = second_interm_path.replace(third_last_folder,'')

                ### new folder name
                directory = "Processed_shapefiles"
                ###new path
                global path
                path = os.path.join(new_processed_path,directory)

                if os.path.exists(path):
                    
                    ###delete files and folder###
                    reply = QMessageBox.warning(None,  'PCA Geomax Survey Processing Plugin',
                                                'The folder and the files already exist! \nDo you want to overwrite it? All your previous edits on the processed layers will be lost. \n \nTo overwrite, select YES and delete the folder "Processed_shapefiles" from the \
                                                        disk (the folder will be open automatically) and then, re-run the plugin.',
                                                QMessageBox.Yes, QMessageBox.No)
                    if reply == QMessageBox.No: 
                        return self.dontdonothing()
                                        
                    if reply == QMessageBox.Yes:
                        
                        root = QgsProject.instance().layerTreeRoot()
                        RemoveLayers = []
                        group_survey = root.findGroup(group_name)


                        for child in group_survey.children():
                            if isinstance(child, QgsLayerTreeLayer):
                                if child.layer().isValid():
                                    if child.layer().type() == QgsMapLayer.VectorLayer:
                                        RemoveLayers.append(child.layer().id())

                        if len(RemoveLayers) > 0:
                            QgsProject.instance().removeMapLayers( RemoveLayers )
                            iface.mapCanvas().refresh()
                        RemoveLayers.clear()
                        root.removeChildNode(group_survey)
                   
                        # ##method open the folder and delete manually
                        path = os.path.realpath(new_processed_path)
           
                        os.startfile(path)
                        iface.messageBar().pushMessage('PCA Geomax Survey Processing Plugin:', 'Manually delete the folder "Processed_shapefiles" and re-run the plugin', level=Qgis.Info)   
                        
                        return self.dontdonothing()
                        
                        
                        ### START - Attempt to remove automaticcaly the files and the folder###
                        # #old working version with access problem
                        # for file in glob.glob( path + "/" + "*.*" ):
                            # fd = os.open(file, os.O_WRONLY)
                            
                            # os.close(fd)
                            # os.remove(file)

                        # ########## TEST automatically delete files########### NOT WORKING

                        # #new try to solve access problem -WinError32-
                       
         
                        # # for file in glob.glob( path + "/" + "*.shp" ):

                            # # shapelayer = QgsVectorLayer(file,"to_be_removed")
                            
                            
                            # # QgsProject.instance().addMapLayer(shapelayer)
                            
                            # # #shapelayertoremove = QgsProject.instance().mapLayersByName('to_be_removed')[0]
                            # # QgsProject.instance().removeMapLayer(shapelayer.id())
                            
                            # # shapelayer = None
                            # # _deleteoldshp = QgsVectorFileWriter.deleteShapeFile(file)
                            
                            # # iface.mapCanvas().refresh()
                            # # # files_to_remove_list.append(file)
                            # # # fd = os.open(file, os.O_WRONLY)
                            # # if _deleteoldshp == True:
                                # # print (file, ' deleted correctly')
                            # # if _deleteoldshp == False:
                                # # print (file, ' not deteleted')
                        
                        # ###TEST version 2
                        # files_to_remove_list = []
                        # for file in glob.glob( path + "/" + "*.*" ):
                            # if os.path.exists(file):
                             
                                # files_to_remove_list.append(file)
                                # fd = os.open(file, os.O_WRONLY)
                                    
                                # os.close(fd)
                        # for v in  files_to_remove_list:
                            
                            # os.remove(v)

                        # files_to_remove_list.clear()

                        # ######## TEST ###########


                        # os.rmdir(path)
                        # QMessageBox.about(
                        # None,
                        # 'PCA Geomax Survey Processing',
                        # '''The folder \n \n{} \n \nwas successfully deleted.'''.format(path))
                        
                        ### END - Attempt to remove automatically the files and the folder###
                    
                if not os.path.exists(path):
                    os.makedirs(path)
                if not root.findGroup(group_name):
                            root.insertGroup(0, group_name) 
                            

                #Create progress bar
                progressMessageBar = iface.messageBar().createMessage("PCA Geomax Survey Processing Plugin: Preparation and uploading of the layers in progress...")
                progress = QProgressBar()
                progress.setMaximum(100)
                progress.setAlignment(Qt.AlignLeft|Qt.AlignVCenter)
                progressMessageBar.layout().addWidget(progress)
                iface.messageBar().pushWidget(progressMessageBar, Qgis.Info)
                
                
                
                progress.setValue(0)






                empty_layers_list = []
                ##working with any shapefile in the folder
                for file in glob.glob( folder + "/" + "*.shp" ):
                    filename_ext = file.replace(folder+'\\','')
                    filename = filename_ext.replace('.shp','')
                   
                    raw_layer = QgsVectorLayer(file, filename, "ogr")
                    
                    ###ignore empty layers
                    
                    index = len([feature for feature in raw_layer.getFeatures()])
                    if index == 0:
                        empty_layers_list.append(filename)
                        
                    if index != 0:
                        new_path = path+ '\\'+ filename + '_processed.shp'
                        new_path_formatted = new_path.replace('\\','/')
                        new_layer = QgsVectorLayer(file, filename, "ogr")

                    
                        crs = new_layer.crs()
                        crs.createFromId(27700)  # Whatever CRS you want
                        new_layer.setCrs(crs)
                        # thenewepsg = new_layer.crs()

                        writer = QgsVectorFileWriter.writeAsVectorFormat(new_layer,new_path,'utf-8', new_layer.crs(), driverName='ESRI Shapefile')

                        processed_layer = QgsVectorLayer(path, filename + '_processed.shp', "ogr")
                        # newepsg = processed_layer.crs()
                        print ('step 2')
                        progress.setValue(20)
                ##add the processed layers
                for new_file in glob.glob( path + "/" + "*.shp" ):        
                    my_process_path = new_file.replace('\\','/')

                    new_file_ext = new_file.replace(path+'\\','')
                    my_process_name = new_file_ext.replace('.shp','')
                    processed_layer = iface.addVectorLayer(my_process_path, my_process_name, "ogr")


                    ###add layers to map in the correct new group
                    added_layer = QgsProject.instance().mapLayersByName(my_process_name)
                    thelayer = added_layer[0]
                    myblayer = root.findLayer(thelayer.id())
                    myClone = myblayer.clone()
                    parent = myblayer.parent()
                    root.findGroup(group_name).insertChildNode(1, myClone)
                    parent.removeChildNode(myblayer) 

                    ###expand group
                    group_processed_survey = root.findGroup(group_name)
                    group_processed_survey.setExpanded(False) # set as false to remove the false true at the creation
                    group_processed_survey.setExpanded(True)

                    progress.setValue(40)
                    for child in group_processed_survey.children():
                        if isinstance(child, QgsLayerTreeLayer):
                            if child.layer().isValid():
                                if child.layer().type() == QgsMapLayer.VectorLayer:
         
                    #                if child.layer().geometryType() == 2: #polygons
                    #                    with edit(child.layer()):
                    #                       for i in child.layer().fields().names():
                    #                            if(i == 'LN_ID'):
                    #                                my_field1 = child.layer().fields().indexFromName('LN_ID')
                    #                                child.layer().dataProvider().deleteAttributes([my_field1])
                    #                                child.layer().updateFields()
                    #                            if(i == 'LN_CODE'):
                    #                                my_field2 = child.layer().fields().indexFromName('LN_CODE')
                    #                                child.layer().dataProvider().deleteAttributes([my_field2])
                    #                                child.layer().updateFields()
                    #                            if(i == 'LN_PHOTO'):
                    #                                my_field3 = child.layer().fields().indexFromName('LN_PHOTO')
                    #                                child.layer().dataProvider().deleteAttributes([my_field3])
                    #                                child.layer().updateFields()
                                   
                                                       
                    #                if child.layer().geometryType() == 1: #LINES
                    #                    with edit(child.layer()):
                    #                       for i in child.layer().fields().names():
                    #                            if(i == 'LN_ID'):
                    #                                my_field4 = child.layer().fields().indexFromName('LN_ID')
                    #                                child.layer().dataProvider().deleteAttributes([my_field4])
                    #                                child.layer().updateFields()
                    #                            if(i == 'LN_CODE'):
                    #                                my_field5 = child.layer().fields().indexFromName('LN_CODE')
                    #                                child.layer().dataProvider().deleteAttributes([my_field5])
                    #                                child.layer().updateFields()
                    #                            if(i == 'LN_PHOTO'):
                    #                                my_field6 = child.layer().fields().indexFromName('LN_PHOTO')
                    #                                child.layer().dataProvider().deleteAttributes([my_field6])
                    #                                child.layer().updateFields()



                                    if child.layer().geometryType() == 0: #POINTS
                                        with edit(child.layer()):
                                            for field in child.layer().fields().names():
                                                if field == 'PT_X-EAST':
                                                    idx = child.layer().fields().indexFromName('PT_X-EAST')
                                                    child.layer().renameAttribute(idx, 'X')
                                                    child.layer().updateFields()
                                                if field == 'PT_Y-NORTH':
                                                    idx = child.layer().fields().indexFromName('PT_Y-NORTH')
                                                    child.layer().renameAttribute(idx, 'Y')
                                                    child.layer().updateFields()
                                                if field == 'PT_X-EAST':
                                                    idx = child.layer().fields().indexFromName('PT_HEIGHT')
                                                    child.layer().renameAttribute(idx, 'Z')
                                                    child.layer().updateFields()
            print('step 3')
            progress.setValue(100)
            ##ending time
            time1= datetime.now()


            ##duration
            delta = time1-time0

            time = delta.total_seconds()
            if len(empty_layers_list) != 0:
                QMessageBox.about(
                        None,
                        'PCA Geomax Survey Processing',
                        '''The layers have been successfully added to the map in {} seconds.\n \n{} \n \nwere empty and have been discarded.'''.format(time, '\n'.join(map(str, empty_layers_list))))
                iface.messageBar().clearWidgets()
            if len(empty_layers_list) == 0:
                QMessageBox.about(
                        None,
                        'PCA Geomax Survey Processing',
                        '''The layers have been successfully added to the map in {} seconds.\n No empty layers have been discarded.'''.format(time))
                iface.messageBar().clearWidgets()


               
            empty_layers_list.clear()   
                    
         
    def copy_and_paste_to_GIS(self):
        if self.first_start == True:
            self.first_start = False
            
            
            
        # show the dialog
        self.dlgtool2.show()
        # Run the dialog event loop
        result = self.dlgtool2.exec_()
        # See if OK was pressed
        if result:
            #add the action here
        
            
            
            
            ### Copy and paste all the data from the survey processing layer to the corresponding GIS template. ###
            ### After copying, the survey layer is removed from the TOC                                         ###
            
            
            copied_layers_list = []
            #Interventions polygons
            survey_layer_name = 'Polygon_INTERVENTION_PLY_processed'
            gis_layer = 'Interventions'
            if len(QgsProject.instance().mapLayersByName(survey_layer_name)) != 0 and \
            len(QgsProject.instance().mapLayersByName(gis_layer)) != 0:
                survey_data_layer = QgsProject.instance().mapLayersByName(survey_layer_name)[0]
                gis_layer = QgsProject.instance().mapLayersByName(gis_layer)[0]
                if survey_data_layer.isValid() and gis_layer.isValid():
                        if survey_data_layer.type() == QgsMapLayer.VectorLayer and \
                        gis_layer.type() == QgsMapLayer.VectorLayer:
                            iface.setActiveLayer( survey_data_layer ) 
                            survey_data_layer.selectAll()
                            iface.actionCopyFeatures().trigger()
                            iface.setActiveLayer(gis_layer)
                            gis_layer.startEditing()
                            iface.actionPasteFeatures().trigger()
                            gis_layer.commitChanges()
                            survey_data_layer.removeSelection()
                            gis_layer.removeSelection()
                            QgsProject.instance().removeMapLayer(survey_data_layer.id())
                            gis_layer.updateExtents()
                            copied_layers_list.append(survey_layer_name)
            else:
                pass 


            #Section lines
            survey_layer_name = 'Lines_SECTION_LN_processed'
            gis_layer = 'Sections'
            if len(QgsProject.instance().mapLayersByName(survey_layer_name)) != 0 and \
            len(QgsProject.instance().mapLayersByName(gis_layer)) != 0:
                survey_data_layer = QgsProject.instance().mapLayersByName(survey_layer_name)[0]
                gis_layer = QgsProject.instance().mapLayersByName(gis_layer)[0]
                if survey_data_layer.isValid() and gis_layer.isValid():
                        if survey_data_layer.type() == QgsMapLayer.VectorLayer and \
                        gis_layer.type() == QgsMapLayer.VectorLayer:
                            iface.setActiveLayer( survey_data_layer ) 
                            survey_data_layer.selectAll()
                            iface.actionCopyFeatures().trigger()
                            iface.setActiveLayer(gis_layer)
                            gis_layer.startEditing()
                            iface.actionPasteFeatures().trigger()
                            gis_layer.commitChanges()
                            survey_data_layer.removeSelection()
                            gis_layer.removeSelection()
                            QgsProject.instance().removeMapLayer(survey_data_layer.id())
                            gis_layer.updateExtents()
                            copied_layers_list.append(survey_layer_name)
            else:
                pass 
            

            #Slope Lines
            survey_layer_name = 'Lines_SLOPE_LN_processed'
            gis_layer = 'Slopes'
            if len(QgsProject.instance().mapLayersByName(survey_layer_name)) != 0 and \
            len(QgsProject.instance().mapLayersByName(gis_layer)) != 0:
                survey_data_layer = QgsProject.instance().mapLayersByName(survey_layer_name)[0]
                gis_layer = QgsProject.instance().mapLayersByName(gis_layer)[0]
                if survey_data_layer.isValid() and gis_layer.isValid():
                        if survey_data_layer.type() == QgsMapLayer.VectorLayer and \
                        gis_layer.type() == QgsMapLayer.VectorLayer:
                            iface.setActiveLayer( survey_data_layer ) 
                            survey_data_layer.selectAll()
                            iface.actionCopyFeatures().trigger()
                            iface.setActiveLayer(gis_layer)
                            gis_layer.startEditing()
                            iface.actionPasteFeatures().trigger()
                            gis_layer.commitChanges()
                            survey_data_layer.removeSelection()
                            gis_layer.removeSelection()
                            QgsProject.instance().removeMapLayer(survey_data_layer.id())
                            gis_layer.updateExtents()
                            copied_layers_list.append(survey_layer_name)
            else:
                pass 

            #Levels points 
            survey_layer_name = 'Points_LEVELS_PT_processed'
            gis_layer = 'Levels'
            if len(QgsProject.instance().mapLayersByName(survey_layer_name)) != 0 and \
            len(QgsProject.instance().mapLayersByName(gis_layer)) != 0:
                survey_data_layer = QgsProject.instance().mapLayersByName(survey_layer_name)[0]
                gis_layer = QgsProject.instance().mapLayersByName(gis_layer)[0]
                if survey_data_layer.isValid() and gis_layer.isValid():
                        if survey_data_layer.type() == QgsMapLayer.VectorLayer and \
                        gis_layer.type() == QgsMapLayer.VectorLayer:
                            iface.setActiveLayer( survey_data_layer ) 
                            survey_data_layer.selectAll()
                            iface.actionCopyFeatures().trigger()
                            iface.setActiveLayer(gis_layer)
                            gis_layer.startEditing()
                            iface.actionPasteFeatures().trigger()
                            gis_layer.commitChanges()
                            survey_data_layer.removeSelection()
                            gis_layer.removeSelection()
                            QgsProject.instance().removeMapLayer(survey_data_layer.id())
                            gis_layer.updateExtents()
                            copied_layers_list.append(survey_layer_name)
            else:
                pass
            
            
            #Drawing Points
            survey_layer_name = 'Points_DRAWING_POINTS_PT_processed'
            gis_layer = 'Drawing_Points'
            if len(QgsProject.instance().mapLayersByName(survey_layer_name)) != 0 and \
            len(QgsProject.instance().mapLayersByName(gis_layer)) != 0:
                survey_data_layer = QgsProject.instance().mapLayersByName(survey_layer_name)[0]
                gis_layer = QgsProject.instance().mapLayersByName(gis_layer)[0]
                if survey_data_layer.isValid() and gis_layer.isValid():
                        if survey_data_layer.type() == QgsMapLayer.VectorLayer and \
                        gis_layer.type() == QgsMapLayer.VectorLayer:
                            iface.setActiveLayer( survey_data_layer ) 
                            survey_data_layer.selectAll()
                            iface.actionCopyFeatures().trigger()
                            iface.setActiveLayer(gis_layer)
                            gis_layer.startEditing()
                            iface.actionPasteFeatures().trigger()
                            gis_layer.commitChanges()
                            survey_data_layer.removeSelection()
                            gis_layer.removeSelection()
                            QgsProject.instance().removeMapLayer(survey_data_layer.id())
                            gis_layer.updateExtents()
                            copied_layers_list.append(survey_layer_name)
            else:
                pass
     
            #TBM Points
            survey_layer_name = 'Points_TBM_PT_processed'
            gis_layer = 'TBM'
            if len(QgsProject.instance().mapLayersByName(survey_layer_name)) != 0 and \
            len(QgsProject.instance().mapLayersByName(gis_layer)) != 0:
                survey_data_layer = QgsProject.instance().mapLayersByName(survey_layer_name)[0]
                gis_layer = QgsProject.instance().mapLayersByName(gis_layer)[0]
                if survey_data_layer.isValid() and gis_layer.isValid():
                        if survey_data_layer.type() == QgsMapLayer.VectorLayer and \
                        gis_layer.type() == QgsMapLayer.VectorLayer:
                            iface.setActiveLayer( survey_data_layer ) 
                            survey_data_layer.selectAll()
                            iface.actionCopyFeatures().trigger()
                            iface.setActiveLayer(gis_layer)
                            gis_layer.startEditing()
                            iface.actionPasteFeatures().trigger()
                            gis_layer.commitChanges()
                            survey_data_layer.removeSelection()
                            gis_layer.removeSelection()
                            QgsProject.instance().removeMapLayer(survey_data_layer.id())
                            gis_layer.updateExtents()
                            copied_layers_list.append(survey_layer_name)
            else:
                pass
            
            #Target Points
            survey_layer_name = 'Points_TARGET_PT_processed'
            gis_layer = 'Targets'
            if len(QgsProject.instance().mapLayersByName(survey_layer_name)) != 0 and \
            len(QgsProject.instance().mapLayersByName(gis_layer)) != 0:
                survey_data_layer = QgsProject.instance().mapLayersByName(survey_layer_name)[0]
                gis_layer = QgsProject.instance().mapLayersByName(gis_layer)[0]
                if survey_data_layer.isValid() and gis_layer.isValid():
                        if survey_data_layer.type() == QgsMapLayer.VectorLayer and \
                        gis_layer.type() == QgsMapLayer.VectorLayer:
                            iface.setActiveLayer( survey_data_layer ) 
                            survey_data_layer.selectAll()
                            iface.actionCopyFeatures().trigger()
                            iface.setActiveLayer(gis_layer)
                            gis_layer.startEditing()
                            iface.actionPasteFeatures().trigger()
                            gis_layer.commitChanges()
                            survey_data_layer.removeSelection()
                            gis_layer.removeSelection()
                            QgsProject.instance().removeMapLayer(survey_data_layer.id())
                            gis_layer.updateExtents()
                            copied_layers_list.append(survey_layer_name)
            else:
                pass
            
            
            #Small Finds Points
            survey_layer_name = 'Points_SMALL_FINDS_PT_processed'
            gis_layer = 'Small_Finds'
            if len(QgsProject.instance().mapLayersByName(survey_layer_name)) != 0 and \
            len(QgsProject.instance().mapLayersByName(gis_layer)) != 0:
                survey_data_layer = QgsProject.instance().mapLayersByName(survey_layer_name)[0]
                gis_layer = QgsProject.instance().mapLayersByName(gis_layer)[0]
                if survey_data_layer.isValid() and gis_layer.isValid():
                        if survey_data_layer.type() == QgsMapLayer.VectorLayer and \
                        gis_layer.type() == QgsMapLayer.VectorLayer:
                            iface.setActiveLayer( survey_data_layer ) 
                            survey_data_layer.selectAll()
                            iface.actionCopyFeatures().trigger()
                            iface.setActiveLayer(gis_layer)
                            gis_layer.startEditing()
                            iface.actionPasteFeatures().trigger()
                            gis_layer.commitChanges()
                            survey_data_layer.removeSelection()
                            gis_layer.removeSelection()
                            QgsProject.instance().removeMapLayer(survey_data_layer.id())
                            gis_layer.updateExtents()
                            copied_layers_list.append(survey_layer_name)
            else:
                pass
                            
            #Enviromental Points
            survey_layer_name = 'Points_ENVIRONMENTAL_PT_processed'
            gis_layer = 'Environmental'
            if len(QgsProject.instance().mapLayersByName(survey_layer_name)) != 0 and \
            len(QgsProject.instance().mapLayersByName(gis_layer)) != 0:
                survey_data_layer = QgsProject.instance().mapLayersByName(survey_layer_name)[0]
                gis_layer = QgsProject.instance().mapLayersByName(gis_layer)[0]
                if survey_data_layer.isValid() and gis_layer.isValid():
                        if survey_data_layer.type() == QgsMapLayer.VectorLayer and \
                        gis_layer.type() == QgsMapLayer.VectorLayer:
                            iface.setActiveLayer( survey_data_layer ) 
                            survey_data_layer.selectAll()
                            iface.actionCopyFeatures().trigger()
                            iface.setActiveLayer(gis_layer)
                            gis_layer.startEditing()
                            iface.actionPasteFeatures().trigger()
                            gis_layer.commitChanges()
                            survey_data_layer.removeSelection()
                            gis_layer.removeSelection()
                            QgsProject.instance().removeMapLayer(survey_data_layer.id())
                            gis_layer.updateExtents()
                            copied_layers_list.append(survey_layer_name)
            else:
                pass

                            
            #Stations Points
            survey_layer_name = 'Points_STN_PT_processed'
            gis_layer = 'Stations'
            if len(QgsProject.instance().mapLayersByName(survey_layer_name)) != 0 and \
            len(QgsProject.instance().mapLayersByName(gis_layer)) != 0:
                survey_data_layer = QgsProject.instance().mapLayersByName(survey_layer_name)[0]
                gis_layer = QgsProject.instance().mapLayersByName(gis_layer)[0]
                if survey_data_layer.isValid() and gis_layer.isValid():
                        if survey_data_layer.type() == QgsMapLayer.VectorLayer and \
                        gis_layer.type() == QgsMapLayer.VectorLayer:
                            iface.setActiveLayer( survey_data_layer ) 
                            survey_data_layer.selectAll()
                            iface.actionCopyFeatures().trigger()
                            iface.setActiveLayer(gis_layer)
                            gis_layer.startEditing()
                            iface.actionPasteFeatures().trigger()
                            gis_layer.commitChanges()
                            survey_data_layer.removeSelection()
                            gis_layer.removeSelection()
                            QgsProject.instance().removeMapLayer(survey_data_layer.id())
                            gis_layer.updateExtents()
                            copied_layers_list.append(survey_layer_name)
            else:
                pass
            

            iface.mapCanvas().refresh()
            if len(copied_layers_list) != 0:       
                QMessageBox.about(
                            None,
                            'PCA Geomax Survey Processing',
                            '''The survey layers \n \n{} \n\nhave been successfully copied into the corresponding GIS Project layer'''.format('\n'.join(map(str, copied_layers_list))))
                            
            if len(copied_layers_list) == 0:
                QMessageBox.about(
                            None,
                            'PCA Geomax Survey Processing',
                            '''No survey layers were copied into the matching GIS Project layers''') 
            
            copied_layers_list.clear()           
               

    def gpkg_backup(self):
        
        if self.first_start == True:
            self.first_start = False
            
            
            
        # show the dialog
        self.dlgtool4.show()
        # Run the dialog event loop
        result = self.dlgtool4.exec_()
        # See if OK was pressed
        if result:
            #add the action here
        
            layers_list = QgsProject.instance().mapLayers()
            
            if len(layers_list)!= 0:
            
                ref_lyr = iface.activeLayer()
                if iface.activeLayer().storageType() == 'GPKG':
                    if ref_lyr.isValid():
                        if ref_lyr.type() == QgsMapLayer.VectorLayer:
                            layer_name = ref_lyr.name()
                            layer_gpkg_name = '|layername='+ref_lyr.name()
                            layer_path =  (ref_lyr.dataProvider().dataSourceUri())
                            gpkg_path = layer_path.replace(layer_gpkg_name,'')
                            gpkg_name = os.path.basename(gpkg_path)
                            clean_path = gpkg_path.replace(gpkg_name,'')
                         
                            #today = (str(date.today()).replace('-',''))
                            now = datetime.now().strftime("%Y%m%d_%H%M%S")
                            backup_file_name = now+'_'+gpkg_name        
                                    
                            inputgpkg = gpkg_path
                            outputgpkg = QgsProject.instance().homePath()+'/_Geopackage_Backup/'+backup_file_name
                            copy(inputgpkg,outputgpkg)
                            #copy(inputgpkg+'-wal',outputgpkg+'-wal')
                            #copy(inputgpkg+'-shm',outputgpkg+'-shm')

                            QMessageBox.about(
                            None,
                            'PCA Geomax Survey Processing',
                            '''The backup copy of the GeoGackage {} has been successfully created!'''.format(gpkg_name)) 
        
        
    
    def get_DRS_table_layer(self):
        layers_list = QgsProject.instance().mapLayers()
        
        if len(layers_list)!= 0:                  
            tables_list = []            
            for lay in layers_list.values():
                if lay.type() == QgsVectorLayer.VectorLayer:
                    if lay.geometryType() == 4: #nogeometry tables
                        tables_list.append(lay.name())
    
            self.dlgtool3.DRS_on_GIS_comboBox.clear()
            self.dlgtool3.DRS_on_GIS_comboBox.addItems(tables_list)
        if len(layers_list)== 0:
            iface.messageBar().pushMessage(
                "PCA Geomax Survey Processing", 
                "No tables available.",
                level=Qgis.Warning, duration=0)  
            return self.dontdonothing()
            


    def update_DRS_table(self):
        if self.first_start == True:
            #self.first_start = False
            
            self.layers = {layer.name():layer for layer in QgsProject.instance().mapLayers().values() if layer.type()== 0}
            self.get_DRS_table_layer()
        
        # show the dialog
        self.dlgtool3.show()
        # Run the dialog event loop
        result = self.dlgtool3.exec_()
        # See if OK was pressed
        if result:
            DRS_Table_on_GIS = self.dlgtool3.DRS_on_GIS_comboBox.currentText()
            new_DRS_csv_file = self.dlgtool3.DRS_new_file_mQgsFileWidget.filePath()
           
            if len(DRS_Table_on_GIS) == 0:
                QMessageBox.about(None,'PCA Geomax Survey Processing', 'No valid DRS table was selected. Please select a layer.')
                return self.dontdonothing()
             
            else:
                self.shpLayer = self.layers[self.dlgtool3.DRS_on_GIS_comboBox.currentText()]
                
                ###add the new version of the DRS CSV
                CSV_file_path = new_DRS_csv_file.replace('\\','/')
               
                uri = "file:///"+ CSV_file_path + "?delimiter=,"
                
                vlayer = QgsVectorLayer(uri, "Temp_CSV", "delimitedtext")
                QgsProject.instance().addMapLayer(vlayer)
                
                CSV_table = QgsProject.instance().mapLayersByName(DRS_Table_on_GIS)[0]
       
                external_DRS_CSV = QgsProject.instance().mapLayersByName('Temp_CSV')[0]

                if external_DRS_CSV.isValid() and CSV_table.isValid():
                        if external_DRS_CSV.type() == QgsMapLayer.VectorLayer and \
                        CSV_table.type() == QgsMapLayer.VectorLayer:
                           
                            with edit(CSV_table):
                                for feature in CSV_table.getFeatures():
                                    CSV_table.deleteFeature(feature.id())
                            
                            iface.setActiveLayer( external_DRS_CSV ) 
                            external_DRS_CSV.selectAll()
                            iface.actionCopyFeatures().trigger()
                            iface.setActiveLayer(CSV_table)
                            CSV_table.startEditing()
                            iface.actionPasteFeatures().trigger()
                            CSV_table.commitChanges()
                            external_DRS_CSV.removeSelection()
                            CSV_table.removeSelection()
                            QgsProject.instance().removeMapLayer(external_DRS_CSV.id())                   
                
                            QMessageBox.about(
                            None,
                            'PCA Geomax Survey Processing',
                            '''The GIS DRS_Table has been successfully updated!''') 

    def help_show(self):
       
        ##chrome_path = 'C:/Program Files (x86)/Google/Chrome/Application/chrome.exe %s'
        help_path = os.path.join(self.plugin_dir,'help','help.html')
        webbrowser.open(help_path)
                    

    def dontdonothing(self):
        pass
    